From f1e88262ef77bcd9d0ec50180ecd1a9c0f646049 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Tue, 25 Jun 2019 10:34:14 +0800
Subject: [PATCH] dnfpayload.py: customize for OE

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

Update context for anaconda 32.

the storage and data are not propagated to the payload again, so remove
from setup().

Signed-off-by: Kai Kang <kai.kang@windriver.com>

Rebase for anaconda 34 on 20210727.
* rebase code
* remove debug code
* remove patch for function language_groups() which has been remove from upstream

Signed-off-by: Kai Kang <kai.kang@windriver.com>

Rebase for anaconda 37 on 20221020.

Signed-off-by: Kai Kang <kai.kang@windriver.com>
---
 .../modules/payloads/payload/dnf/dnf_manager.py    |  37 +++-
 .../payloads/payload/dnf/transaction_progress.py   |   6 +-
 pyanaconda/modules/payloads/payload/dnf/utils.py   |  10 --
 .../modules/payloads/payload/dnf/validation.py     | 186 +++++++++++++++++++++
 pyanaconda/payload/dnf/payload.py                  |  11 ++
 5 files changed, 237 insertions(+), 13 deletions(-)

diff --git a/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py b/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py
index 3a679a656f..a5e07468f0 100644
--- a/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py
+++ b/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py
@@ -17,6 +17,7 @@
 # License and may only be used or replicated with the express permission of
 # Red Hat, Inc.
 #
+import os
 import multiprocessing
 import shutil
 import threading
@@ -37,7 +38,7 @@ from pyanaconda.core.constants import DNF_DEFAULT_TIMEOUT, DNF_DEFAULT_RETRIES,
     URL_TYPE_MIRRORLIST, URL_TYPE_METALINK, DNF_DEFAULT_REPO_COST
 from pyanaconda.core.i18n import _
 from pyanaconda.core.payload import ProxyString, ProxyStringError
-from pyanaconda.core.util import get_os_release_value
+from pyanaconda.core.util import get_os_release_value, execWithRedirect
 from pyanaconda.modules.common.errors.installation import PayloadInstallationError
 from pyanaconda.modules.common.errors.payload import UnknownCompsEnvironmentError, \
     UnknownCompsGroupError, UnknownRepositoryError
@@ -109,6 +110,7 @@ class DNFManager(object):
         """The DNF base."""
         if self.__base is None:
             self.__base = self._create_base()
+            self._oe_configure(self.__base.conf)
 
         return self.__base
 
@@ -134,7 +136,7 @@ class DNFManager(object):
 
         # Set the platform id based on the /os/release present
         # in the installation environment.
-        platform_id = get_os_release_value("PLATFORM_ID")
+        platform_id = get_os_release_value("VERSION_ID")
 
         if platform_id is not None:
             base.conf.module_platform_id = platform_id
@@ -1080,3 +1082,34 @@ class DNFManager(object):
                 continue
 
         return ""
+
+    def _oe_configure(self, dnf_conf):
+        # Refers oe-core's recipes of dnf and rpm
+        os.environ['RPM_NO_CHROOT_FOR_SCRIPTS'] = "1"
+
+        # Refers oe-core's meta/lib/oe/package_manager.py
+        # def _prepare_pkg_transaction(self) in class RpmPM(PackageManager)
+        target_rootfs = conf.target.system_root
+        os.environ['D'] = target_rootfs
+        os.environ['OFFLINE_ROOT'] = target_rootfs
+        os.environ['IPKG_OFFLINE_ROOT'] = target_rootfs
+        os.environ['OPKG_OFFLINE_ROOT'] = target_rootfs
+
+        # Refer oe-core's meta/lib/oe/package_manager.py
+        # def _configure_dnf(self) in class RpmPM(PackageManager)
+        # directly read its result from installer system
+        dnf_conf.substitutions['arch'] = open("/etc/dnf/vars/arch", "r").readline()
+
+        dnf_conf.errorlevel = dnf.const.VERBOSE_LEVEL
+        dnf_conf.debuglevel = dnf.const.VERBOSE_LEVEL
+
+
+    def oe_configure_post(self):
+        # Refers oe-core's meta/lib/oe/package_manager.py
+        # def _configure_rpm(self) and def _configure_dnf(self)
+        # in class RpmPM(PackageManager)
+        # directly copy its result from installer system
+        target_sysconf = "%s/etc" % conf.target.system_root
+        execWithRedirect("cp", ["-fr", "/etc/rpmrc", target_sysconf])
+        execWithRedirect("cp", ["-rf", "/etc/dnf", target_sysconf])
+        execWithRedirect("cp", ["-rf", "/etc/rpm", target_sysconf])
diff --git a/pyanaconda/modules/payloads/payload/dnf/transaction_progress.py b/pyanaconda/modules/payloads/payload/dnf/transaction_progress.py
index b277156819..a045c56aea 100644
--- a/pyanaconda/modules/payloads/payload/dnf/transaction_progress.py
+++ b/pyanaconda/modules/payloads/payload/dnf/transaction_progress.py
@@ -140,7 +140,11 @@ class TransactionProgress(dnf.callback.TransactionProgress):
 
         :param message: a string that describes the error
         """
-        self._queue.put(('error', message))
+        token = "error"
+        if message.startswith("Error in POSTIN scriptlet in rpm package"):
+            token = "warn"
+        self._queue.put((token, message))
+        log.info("error: %s" % message)
 
     def quit(self, message):
         """Report the end of the transaction and close the queue.
diff --git a/pyanaconda/modules/payloads/payload/dnf/utils.py b/pyanaconda/modules/payloads/payload/dnf/utils.py
index f7895016e9..f99f3b8b1f 100644
--- a/pyanaconda/modules/payloads/payload/dnf/utils.py
+++ b/pyanaconda/modules/payloads/payload/dnf/utils.py
@@ -108,18 +108,8 @@ def get_installation_specs(data: PackagesSelectionData, default_environment=None
     exclude_list = []
 
     # Handle the environment.
-    if data.default_environment_enabled and default_environment:
-        log.info("Selecting default environment '%s'.", default_environment)
-        include_list.append("@{}".format(default_environment))
-    elif data.environment:
-        include_list.append("@{}".format(data.environment))
 
     # Handle the core group.
-    if not data.core_group_enabled:
-        log.info("Skipping @core group; system may not be complete.")
-        exclude_list.append("@core")
-    else:
-        include_list.append("@core")
 
     # Handle groups.
     for group_name in data.excluded_groups:
diff --git a/pyanaconda/modules/payloads/payload/dnf/validation.py b/pyanaconda/modules/payloads/payload/dnf/validation.py
index 509f7f7032..23da5b3bdb 100644
--- a/pyanaconda/modules/payloads/payload/dnf/validation.py
+++ b/pyanaconda/modules/payloads/payload/dnf/validation.py
@@ -44,6 +44,15 @@ class CheckPackagesSelectionTask(Task):
         self._include_list = []
         self._exclude_list = []
 
+        # base packages
+        self._include_list.extend(['base-files', 'base-passwd', 'shadow'])
+       # Support grub-mkconfig
+       self._include_list.extend(['sed', 'coreutils'])
+
+        # OE specific
+        self.image = {}
+        self.tasks = {}
+
     @property
     def name(self):
         """The name of the task."""
@@ -68,6 +77,10 @@ class CheckPackagesSelectionTask(Task):
         """Clear the previous selection."""
         self._dnf_manager.clear_selection()
 
+        # OE specific
+        self.image = {}
+        self.tasks = {}
+
     def _collect_selected_specs(self):
         """Collect specs for the selected software."""
         log.debug("Collecting selected specs.")
@@ -80,6 +93,13 @@ class CheckPackagesSelectionTask(Task):
             self._selection, default_environment
         )
 
+        # OE specific
+        self.image, self.tasks = self._read_buildstamp()
+
+        for pkg_name in self._apply_yocto_environment(default_environment):
+            log.info("selected yocto package: '%s'", pkg_name)
+            include_list.append(pkg_name)
+
         self._include_list.extend(include_list)
         self._exclude_list.extend(exclude_list)
 
@@ -127,3 +147,169 @@ class CheckPackagesSelectionTask(Task):
             report.error_messages.append(str(e))
         except InvalidSelectionError as e:
             report.error_messages.append(str(e))
+
+    def _read_buildstamp(self):
+        image = {}
+        tasks = {}
+
+        config = configparser.ConfigParser()
+        config.read(["/tmp/product/.buildstamp", "/.buildstamp", os.environ.get("PRODBUILDPATH", "")])
+
+        image_list = config.get("Rootfs", "LIST", fallback='').split()
+        for image_name in image_list:
+            _id_ = image_name.split('-')[0]
+            image_summary = config.get(image_name, "SUMMARY")
+            image_description = config.get(image_name, "DESCRIPTION")
+            package_install = config.get(image_name, "PACKAGE_INSTALL")
+            package_install_attemptonly = config.get(image_name,
+                                                         "PACKAGE_INSTALL_ATTEMPTONLY")
+            image_linguas = config.get(image_name, "IMAGE_LINGUAS")
+            image[image_name] = (image_summary,
+                                 image_description,
+                                 package_install,
+                                 package_install_attemptonly,
+                                 image_linguas)
+
+            short_image = image_name.replace("%s-image-" % _id_, "")
+
+            taskid = short_image
+            name = image_name
+            description = "%s" % image_summary
+            group = ""
+            tasks[taskid] = (name, description, group)
+
+            taskid = "%s-dev" % short_image
+            name = "%s dev-pkgs staticdev-pkgs" % image_name
+            description = "%s with development files" % image_summary
+            group = "dev-pkgs staticdev-pkgs"
+            tasks[taskid] = (name, description, group)
+
+            taskid = "%s-dbg" % short_image
+            name = "%s dbg-pkgs" % image_name
+            description = "%s with debug symbols" % image_summary
+            group = "dbg-pkgs"
+            tasks[taskid] = (name, description, group)
+
+            taskid = "%s-dev-dbg" % short_image
+            name = "%s dev-pkgs staticdev-pkgs dbg-pkgs" % image_name
+            description = "%s with development files and debug symbols" % image_summary
+            group = "dev-pkgs staticdev-pkgs dbg-pkgs"
+            tasks[taskid] = (name, description, group)
+
+        return image, tasks
+
+    def _apply_yocto_environment(self, env):
+        if not env:
+            return []
+
+        (image_name, description) = self.environment_description(env)
+        log.info("image_name %s, des %s" % (image_name, description))
+        image_id = image_name.split()[0]
+        (image_summary, image_description, package_install,
+            package_install_attemptonly, image_linguas) = self.image[image_id]
+        log.info("package_install %s, attempt %s, linguas %s" %
+                 (package_install, package_install_attemptonly, image_linguas))
+
+        # Language locale
+        self._select_yocto_linguas(image_linguas)
+
+        # -dbg/-doc/-dev
+        for group in self.tasks[env][2].split():
+            self._select_yocto_group(group)
+
+        # Installing packages
+        return package_install.split()
+
+    def _select_yocto_group(self, group_id):
+        log.info("_select_yocto_group %s" % group_id)
+        if not group_id:
+            return []
+
+        glob = self._yocto_complementary_glob(group_id)
+
+        # get all available languages in repos
+        available_packs = self._base.sack.query().available().filter(
+                            name__glob="*-%s" % glob)
+        allpkgnames = [p.name for p in available_packs]
+        log.info("allpkgnames %d" % len(allpkgnames))
+        for pkgname in allpkgnames:
+            self._try_install_package(pkgname)
+
+    def _select_yocto_linguas(self, image_linguas):
+        lc_globs = []
+        for ling in image_linguas.split():
+            if ling not in lc_globs:
+                lc_globs.append(ling)
+
+            baselang = ling.split('-')[0]
+            if ling != baselang and baselang not in lc_globs:
+                lc_globs.append(baselang)
+
+        log.info("lc_globs: %s" % lc_globs)
+        for lc_glob in lc_globs:
+            self._select_yocto_group("locale-%s" % lc_glob)
+
+    def _try_install_package(self, pkg_name):
+        try:
+            return self._base.install(pkg_name, strict=False)
+        except dnf.exceptions.MarkingError:
+            msg = "Payload error - No such package: %s" % pkg_name
+            raise PayloadError(msg)
+
+    # Refer upstream oe-core meta/lib/oe/package_manager.py
+    def _save_rpmpostinst(self, pkg):
+        def _script_num_prefix(path):
+            files = os.listdir(path)
+            numbers = set()
+            numbers.add(99)
+            for f in files:
+                numbers.add(int(f.split("-")[0]))
+            return max(numbers) + 1
+
+        log.info("Saving postinstall script of %s" % (pkg))
+
+        target_rootfs = conf.target.system_root
+        args = ["-q", "--root=%s" % target_rootfs, "--queryformat", "%{postin}", pkg]
+
+        output = util.execWithCapture('rpm', args, log_output=False)
+        log.info(output)
+
+        target_path = "%s/etc/rpm-postinsts" % target_rootfs
+        util.execWithRedirect("mkdir", ["-p", target_path])
+        num = _script_num_prefix(target_path)
+        saved_script_name = os.path.join(target_path, "%d-%s" % (num, pkg))
+        open(saved_script_name, 'w').write(output)
+        os.chmod(saved_script_name, 0o755)
+
+    def _list_installed(self):
+        output = util.execWithCapture(
+                      'dnf',
+                      [
+                        'repoquery',
+                        '--installed',
+                        '--installroot='+conf.target.system_root,
+                        '--queryformat=Package:%{name}'
+                      ],
+                      log_output=False
+                 )
+        output = output.rstrip()
+        lines = output.splitlines()
+        installed = []
+        for line in lines:
+            if not line.startswith("Package:"):
+                continue
+            installed.append(line.replace("Package:", ""))
+        return installed
+
+    def _yocto_complementary_glob(self, group):
+        complementary_glob = {}
+        complementary_glob['dev-pkgs'] = 'dev'
+        complementary_glob['staticdev-pkgs'] = 'staticdev'
+        complementary_glob['doc-pkgs'] = 'doc'
+        complementary_glob['dbg-pkgs'] = 'dbg'
+        complementary_glob['ptest-pkgs'] = 'ptest'
+
+        if group in complementary_glob:
+            return complementary_glob[group]
+
+        return group
diff --git a/pyanaconda/payload/dnf/payload.py b/pyanaconda/payload/dnf/payload.py
index 5312825fa1..8e78faff39 100644
--- a/pyanaconda/payload/dnf/payload.py
+++ b/pyanaconda/payload/dnf/payload.py
@@ -88,6 +88,10 @@ class DNFPayload(Payload):
         # Configure the DNF logging.
         configure_dnf_logging()
 
+        # OE specific
+        self.image = {}
+        self.tasks = {}
+
     @property
     def dnf_manager(self):
         """The DNF manager."""
@@ -278,10 +282,17 @@ class DNFPayload(Payload):
     def setup(self):
         self.verbose_errors = []
 
+        # OE specific
+        self.image, self.tasks = self._read_buildstamp()
+
     def unsetup(self):
         self._dnf_manager.reset_base()
         tear_down_sources(self.proxy)
 
+        # OE specific
+        self.image = {}
+        self.tasks = {}
+
     @property
     def needs_network(self):
         """Test base and additional repositories if they require network."""
-- 
2.7.4
